name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat/*, fix/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --with dev --no-interaction

    - name: Create test data
      run: |
        mkdir -p data
        echo "Symbol,Shortname,Marketcap,Sector" > data/sp500.csv
        echo "AAPL,Apple,2000000000000,Technology" >> data/sp500.csv
        echo "MSFT,Microsoft,1800000000000,Technology" >> data/sp500.csv
        echo "GOOGL,Alphabet,1500000000000,Technology" >> data/sp500.csv

    - name: Check code formatting with Black
      run: poetry run black --check --diff .

    - name: Lint with Ruff
      run: poetry run ruff check .

    - name: Check for security issues with Bandit
      run: poetry run bandit -r src/ -f json -o bandit-report.json || true

    - name: Check for known vulnerabilities with Safety
      run: poetry run safety check --json --output safety-report.json || true

    - name: Run tests with coverage
      run: poetry run pytest --cov=src --cov-report=xml --cov-report=term-missing tests/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json

  fastapi-tests:
    runs-on: ubuntu-latest
    needs: lint-and-test
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --with dev --no-interaction

    - name: Create test data
      run: |
        mkdir -p data
        echo "Symbol,Shortname,Marketcap,Sector" > data/sp500.csv
        echo "AAPL,Apple,2000000000000,Technology" >> data/sp500.csv
        echo "MSFT,Microsoft,1800000000000,Technology" >> data/sp500.csv
        echo "GOOGL,Alphabet,1500000000000,Technology" >> data/sp500.csv

    - name: Run FastAPI tests
      run: poetry run pytest src/kpi_service/tests/ -v

  build-docker:
    runs-on: ubuntu-latest
    needs: [lint-and-test, fastapi-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t csv-report:latest .

    - name: Run Docker container test
      run: |
        docker run -d --name csv-report-test -p 8000:8000 csv-report:latest
        sleep 10
        curl -f http://localhost:8000/healthz || exit 1
        docker stop csv-report-test
        docker rm csv-report-test